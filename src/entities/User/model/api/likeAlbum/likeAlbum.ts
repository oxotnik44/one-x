import toast from 'react-hot-toast';
import { useUserStore } from 'entities/User/model/slice/useUserStore';
import type { User } from 'entities/User/model/types/user';
import { apiJson } from 'shared/api';

export const likeAlbum = async (albumId: string): Promise<void> => {
    const { authData, toggleLikeAlbum } = useUserStore.getState();

    if (!authData) {
        toast.error('–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ª–∞–π–∫–∞—Ç—å');
        return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π likedAlbums –ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ –≤—ã–∑–æ–≤–∞ toggleLikeAlbum
    const updatedLikedAlbums = authData.likedAlbums?.includes(albumId)
        ? authData.likedAlbums.filter((id) => id !== albumId)
        : [...(authData.likedAlbums || []), albumId];

    try {
        await apiJson.patch<Partial<User>>(`/users/${authData.id}`, {
            likedAlbums: updatedLikedAlbums,
            recommendation: authData.recommendation,
        });

        // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–æ—Ä
        toggleLikeAlbum(albumId);

        toast.success(
            updatedLikedAlbums.includes(albumId)
                ? '‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
                : 'üíî –£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
        );
    } catch {
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∞–π–∫');
    }
};
