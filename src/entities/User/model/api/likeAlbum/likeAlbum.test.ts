// src/entities/User/model/api/likeAlbum/likeAlbum.test.ts
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { likeAlbum } from './likeAlbum';
import { apiJson } from 'shared/api';
import { useUserStore } from 'entities/User/model/slice/useUserStore';
import toast from 'react-hot-toast';

vi.mock('shared/api', () => ({
    apiJson: {
        patch: vi.fn(),
    },
}));

vi.mock('react-hot-toast', () => ({
    default: {
        error: vi.fn(),
        success: vi.fn(),
    },
    error: vi.fn(),
    success: vi.fn(),
}));

vi.mock('entities/User/model/slice/useUserStore', () => ({
    useUserStore: {
        getState: vi.fn(),
    },
}));

const mockToggleLike = vi.fn();
const userId = 'user-1';

beforeEach(() => {
    vi.clearAllMocks();
});

describe('likeAlbum', () => {
    it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', async () => {
        (useUserStore.getState as any).mockReturnValue({ authData: null });

        await likeAlbum('album-1');

        expect(toast.error).toHaveBeenCalledWith('–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ª–∞–π–∫–∞—Ç—å');
        expect(apiJson.patch).not.toHaveBeenCalled();
    });

    it('–¥–æ–±–∞–≤–ª—è–µ—Ç –∞–ª—å–±–æ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ', async () => {
        // –î–æ toggle: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        (useUserStore.getState as any)
            .mockReturnValueOnce({
                authData: { id: userId, likedAlbums: [] },
                toggleLikeAlbum: mockToggleLike,
            })
            // –ü–æ—Å–ª–µ toggle: ['album-2']
            .mockReturnValueOnce({
                authData: { id: userId, likedAlbums: ['album-2'] },
                toggleLikeAlbum: mockToggleLike,
            });

        (apiJson.patch as any).mockResolvedValue({});

        await likeAlbum('album-2');

        expect(apiJson.patch).toHaveBeenCalledWith(`/users/${userId}`, {
            likedAlbums: ['album-2'],
        });
        expect(mockToggleLike).toHaveBeenCalledWith('album-2');
        expect(toast.success).toHaveBeenCalledWith('‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
    });

    it('—É–¥–∞–ª—è–µ—Ç –∞–ª—å–±–æ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –ª–∞–π–∫–Ω—É—Ç', async () => {
        // –î–æ toggle: ['album-1']
        (useUserStore.getState as any)
            .mockReturnValueOnce({
                authData: { id: userId, likedAlbums: ['album-1'] },
                toggleLikeAlbum: mockToggleLike,
            })
            // –ü–æ—Å–ª–µ toggle: []
            .mockReturnValueOnce({
                authData: { id: userId, likedAlbums: [] },
                toggleLikeAlbum: mockToggleLike,
            });

        (apiJson.patch as any).mockResolvedValue({});

        await likeAlbum('album-1');

        expect(apiJson.patch).toHaveBeenCalledWith(`/users/${userId}`, { likedAlbums: [] });
        expect(mockToggleLike).toHaveBeenCalledWith('album-1');
        expect(toast.success).toHaveBeenCalledWith('üíî –£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
    });

    it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', async () => {
        // –î–æ toggle: ['album-1']
        (useUserStore.getState as any)
            .mockReturnValueOnce({
                authData: { id: userId, likedAlbums: ['album-1'] },
                toggleLikeAlbum: mockToggleLike,
            })
            // –ü–æ—Å–ª–µ toggle: []
            .mockReturnValueOnce({
                authData: { id: userId, likedAlbums: [] },
                toggleLikeAlbum: mockToggleLike,
            });

        (apiJson.patch as any).mockRejectedValue(new Error('–û—à–∏–±–∫–∞'));

        await likeAlbum('album-1');

        // toggleLikeAlbum –≤—Å—ë –∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ –∑–∞–ø—Ä–æ—Å–∞
        expect(mockToggleLike).toHaveBeenCalledWith('album-1');
        // –∏ –Ω–∞ –æ—à–∏–±–∫–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        expect(toast.error).toHaveBeenCalledWith('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∞–π–∫');
    });
});
