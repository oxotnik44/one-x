// src/entities/User/model/api/likeTrack/likeTrack.test.ts
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { likeTrack } from './likeTrack';
import { apiJson } from 'shared/api';
import { useUserStore } from 'entities/User/model/slice/useUserStore';
import toast from 'react-hot-toast';

vi.mock('shared/api');
vi.mock('entities/User/model/slice/useUserStore');
vi.mock('react-hot-toast');

const mockedApi = vi.mocked(apiJson, true);
const mockedStore = vi.mocked(useUserStore, true);
const mockedToast = vi.mocked(toast, true);

describe('likeTrack', () => {
    const trackId = 'track-1';
    const userId = 'user-1';
    const baseToggle = vi.fn();

    beforeEach(() => {
        vi.clearAllMocks();
    });

    it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', async () => {
        mockedStore.getState.mockReturnValue({
            authData: undefined,
            toggleLikeTrack: baseToggle,
        } as any);

        await likeTrack(trackId);

        expect(mockedToast.error).toHaveBeenCalledWith('–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ª–∞–π–∫–∞—Ç—å');
        expect(mockedApi.patch).not.toHaveBeenCalled();
        expect(baseToggle).not.toHaveBeenCalled();
    });

    it('–¥–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫ –≤ –ª–∞–π–∫–∏, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ –±—ã–ª–æ', async () => {
        // –î–æ toggle: –ø—É—Å—Ç–æ–π likedTracks
        mockedStore.getState
            .mockReturnValueOnce({
                authData: { id: userId, likedTracks: [] },
                toggleLikeTrack: baseToggle,
            } as any)
            // –ü–æ—Å–ª–µ toggle: [trackId]
            .mockReturnValueOnce({
                authData: { id: userId, likedTracks: [trackId] },
                toggleLikeTrack: baseToggle,
            } as any);

        mockedApi.patch.mockResolvedValue({ data: { likedTracks: [trackId] } });

        await likeTrack(trackId);

        expect(mockedApi.patch).toHaveBeenCalledWith(`/users/${userId}`, {
            likedTracks: [trackId],
        });
        expect(baseToggle).toHaveBeenCalledWith(trackId);
        expect(mockedToast.success).toHaveBeenCalledWith('‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
    });

    it('—É–±–∏—Ä–∞–µ—Ç —Ç—Ä–µ–∫ –∏–∑ –ª–∞–π–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª', async () => {
        // –î–æ toggle: [trackId]
        mockedStore.getState
            .mockReturnValueOnce({
                authData: { id: userId, likedTracks: [trackId] },
                toggleLikeTrack: baseToggle,
            } as any)
            // –ü–æ—Å–ª–µ toggle: []
            .mockReturnValueOnce({
                authData: { id: userId, likedTracks: [] },
                toggleLikeTrack: baseToggle,
            } as any);

        mockedApi.patch.mockResolvedValue({ data: { likedTracks: [] } });

        await likeTrack(trackId);

        expect(mockedApi.patch).toHaveBeenCalledWith(`/users/${userId}`, { likedTracks: [] });
        expect(baseToggle).toHaveBeenCalledWith(trackId);
        expect(mockedToast.success).toHaveBeenCalledWith('üíî –£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
    });

    it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', async () => {
        // –î–æ toggle: [trackId] ‚Äî –Ω–æ –ø–∞—Ç—á —É–ø–∞–¥—ë—Ç, –∏ toggle –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è
        mockedStore.getState.mockReturnValue({
            authData: { id: userId, likedTracks: [trackId] },
            toggleLikeTrack: baseToggle,
        } as any);
        mockedApi.patch.mockRejectedValue(new Error('fail'));

        await likeTrack(trackId);

        expect(mockedToast.error).toHaveBeenCalledWith('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        expect(baseToggle).toHaveBeenCalledWith(trackId);
    });
});
