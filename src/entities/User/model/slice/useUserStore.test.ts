// src/entities/User/model/slice/useUserStore.test.ts
import { act, renderHook } from '@testing-library/react';
import { useUserStore } from './useUserStore'; // –ø–æ–ø—Ä–∞–≤—å –ø—É—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
import toast from 'react-hot-toast';
import { describe, expect, it, vi, beforeEach, type Mock } from 'vitest';
import type { User } from '../types/user';
import { useTrackStore } from 'entities/Track';

vi.mock('react-hot-toast');
vi.mock('entities/Track', () => ({
    useTrackStore: {
        getState: vi.fn(),
    },
}));

describe('useUserStore', () => {
    beforeEach(() => {
        vi.clearAllMocks();

        // –ú–æ–∫–∞–µ–º useTrackStore —Å —Ç—Ä–µ–∫–∞–º–∏ –∏ –∂–∞–Ω—Ä–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ toggleLikeTrack
        (useTrackStore.getState as Mock).mockReturnValue({
            tracks: [
                { id: 'track1', genre: 'rock' },
                { id: 'track2', genre: 'pop' },
            ],
        });

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–æ—Ä –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º:
        const { result } = renderHook(() => useUserStore());
        act(() => {
            result.current.logout();
        });
    });

    it('–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ authData === null', () => {
        const { result } = renderHook(() => useUserStore());
        expect(result.current.authData).toBeNull();
    });

    it('setAuthData —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', () => {
        const { result } = renderHook(() => useUserStore());
        const fakeUser: User = {
            id: '1qwe',
            username: 'user123',
            password: 'hashed-password',
            avatar: 'https://example.com/avatar.png',
            createdAt: new Date().toISOString(),
        };

        act(() => {
            result.current.setAuthData(fakeUser);
        });

        expect(result.current.authData).toEqual(fakeUser);
    });

    it('logout –æ—á–∏—â–∞–µ—Ç authData –∏ –≤—ã–∑—ã–≤–∞–µ—Ç toast', () => {
        const { result } = renderHook(() => useUserStore());
        const fakeUser: User = {
            id: '1qwe',
            username: 'user123',
            password: 'hashed-password',
            avatar: 'https://example.com/avatar.png',
            createdAt: new Date().toISOString(),
        };

        act(() => {
            result.current.setAuthData(fakeUser);
        });
        act(() => {
            result.current.logout();
        });

        expect(result.current.authData).toBeNull();
        expect(toast).toHaveBeenCalledWith('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', { icon: 'üëã' });
    });

    it('toggleLikeTrack –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –∫ likedTracks', () => {
        const { result } = renderHook(() => useUserStore());
        const fakeUser: User = {
            id: '1qwe',
            username: 'user123',
            password: 'hashed-password',
            avatar: 'https://example.com/avatar.png',
            createdAt: new Date().toISOString(),
            likedTracks: ['track1'],
        };

        act(() => {
            result.current.setAuthData(fakeUser);
        });

        // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é "track2"
        act(() => {
            result.current.toggleLikeTrack('track2');
        });

        expect(result.current.authData?.likedTracks).toEqual(['track1', 'track2']);
    });

    it('toggleLikeTrack —É–±–∏—Ä–∞–µ—Ç —Ç—Ä–µ–∫ –∏–∑ likedTracks, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Ç–∞–º –±—ã–ª', () => {
        const { result } = renderHook(() => useUserStore());
        const fakeUser: User = {
            id: '1qwe',
            username: 'user123',
            password: 'hashed-password',
            avatar: 'https://example.com/avatar.png',
            createdAt: new Date().toISOString(),
            likedTracks: ['track1', 'track2'],
        };

        act(() => {
            result.current.setAuthData(fakeUser);
        });

        // —É–¥–∞–ª—è–µ–º "track1"
        act(() => {
            result.current.toggleLikeTrack('track1');
        });

        expect(result.current.authData?.likedTracks).toEqual(['track2']);
    });

    it('toggleLikeTrack –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç, –µ—Å–ª–∏ authData === null', () => {
        const { result } = renderHook(() => useUserStore());

        act(() => {
            result.current.toggleLikeTrack('track1');
        });

        // authData –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ null –∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
        expect(result.current.authData).toBeNull();
    });
});
